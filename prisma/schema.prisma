// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(dbgenerated("auth.uid()")) @db.Uuid
  email       String   @unique
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relationships
  trackedGames    TrackedGame[]
  gameSuggestions GameSuggestion[]
  notifications   Notification[]

  @@map("users")
}

model TrackedGame {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String       @map("user_id") @db.Uuid
  title         String
  tags          String[]
  releaseStatus ReleaseStatus @map("release_status")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  
  // IGDB Integration Fields
  igdbId        Int?         @map("igdb_id")
  coverArtUrl   String?      @map("cover_art_url")
  description   String?      @db.Text
  releaseDate   DateTime?    @map("release_date")
  developer     String?
  publisher     String?
  genres        String[]
  platforms     String[]
  rating        Int?
  screenshots   String[]
  
  // Relationships
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  newsItems NewsItem[]
  notifications Notification[]

  @@unique([userId, igdbId], name: "unique_user_igdb_game")
  @@map("tracked_games")
}

model NewsItem {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gameId         String?   @map("game_id") @db.Uuid
  title          String
  summary        String?
  fullArticleUrl String?  @map("full_article_url")
  publishedAt    DateTime? @map("published_at")
  createdAt      DateTime @default(now()) @map("created_at")
  
  // Relationships
  game TrackedGame? @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("news_items")
}

model GameSuggestion {
  id            String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String            @map("user_id") @db.Uuid
  gameTitle     String            @map("game_title")
  justification String?
  status        SuggestionStatus  @default(PENDING)
  createdAt     DateTime          @default(now()) @map("created_at")
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("game_suggestions")
}

model Notification {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  gameId    String?  @map("game_id") @db.Uuid
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relationships
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  game TrackedGame? @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum ReleaseStatus {
  RELEASED
  UNRELEASED
  
  @@map("release_status")
}

enum SuggestionStatus {
  PENDING
  ACCEPTED
  DISMISSED
  
  @@map("suggestion_status")
} 